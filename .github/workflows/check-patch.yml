name: "Update and Patch Iosevka Font"

on:
  push:
    branches: [main]
  schedule: [cron: "0 5 1/5 * *"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.check_local.outputs.build }}
      tag: ${{ steps.get_latest.outputs.tag }}
      ver: ${{ steps.get_latest.outputs.ver }}

    steps:
      - name: Install utilities
        run: sudo apt-get update && sudo apt-get install -y jq curl git

      - name: Get latest Iosevka tag
        id: get_latest
        run: |
          HTTP_RESPONSE=$(curl -sL -w "%{http_code}" -o response.json "https://api.github.com/repos/be5invis/Iosevka/releases/latest")
          if [ "$HTTP_RESPONSE" -ne 200 ]; then echo "Error fetching latest Iosevka release: HTTP $HTTP_RESPONSE"; cat response.json; exit 1; fi
          IOSEVKA_TAG=$(jq -r .tag_name response.json)
          if [[ ! "$IOSEVKA_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then echo "Error: Invalid tag format ('$IOSEVKA_TAG')."; exit 1; fi
          IOSEVKA_VER=$(echo "$IOSEVKA_TAG" | sed 's/^v//')
          echo "Latest Version: $IOSEVKA_VER"
          echo "tag=$IOSEVKA_TAG" >> $GITHUB_OUTPUT
          echo "ver=$IOSEVKA_VER" >> $GITHUB_OUTPUT

      - name: Check if latest version exists
        id: check_local
        env:
          EXPECTED_TAG: ${{ steps.get_latest.outputs.ver }}
        run: |
          if git ls-remote --exit-code --tags "${{ github.server_url }}/${{ github.repository }}.git" "refs/tags/${EXPECTED_TAG}" >/dev/null 2>&1; then
              echo "Tag $EXPECTED_TAG exists on remote. No build needed."
              echo "build=false" >> $GITHUB_OUTPUT
          elif [ $? -eq 2 ]; then
              echo "Tag $EXPECTED_TAG does not exist on remote. Build is needed."
              echo "build=true" >> $GITHUB_OUTPUT
          else
              echo "Error running git ls-remote: exit code $?."
              exit 1
          fi

  patch:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build == 'true'

    env:
      FONT_NAME: "IosevkaTermSS03"

    steps:
      - name: Setup core dependencies
        run: |
          sudo apt update -y -q
          sudo apt install software-properties-common unzip curl -y -q

      - name: Install FontForge
        env:
          FF_VERSION: "20230101"
          FF_ARCHIVE_TYPE: "tar.xz"
        run: |
          sudo apt install libjpeg-dev libtiff5-dev libpng-dev libfreetype6-dev libgif-dev libgtk-3-dev libxml2-dev libpango1.0-dev libcairo2-dev libspiro-dev python3-dev ninja-build cmake build-essential gettext libuninameslist-dev libgtkmm-3.0-dev -y -q
          #curl -L "https://github.com/fontforge/fontforge/releases/download/${{ env.FF_VERSION }}/fontforge-${{ env.FF_VERSION }}.${{ env.FF_ARCHIVE_TYPE }}" \
          #  --output "FontForge.${{ env.FF_ARCHIVE_TYPE }}"
          curl -L https://github.com/fontforge/fontforge/archive/refs/heads/master.zip --output FontForge.zip
          #tar -xf "FontForge.${{ env.FF_ARCHIVE_TYPE }}"
          unzip FontForge.zip
          #cd "fontforge-${{ env.FF_VERSION }}/"
          cd fontforge-master || exit 1
          mkdir build
          cd build
          cmake -GNinja ..
          ninja
          sudo ninja install
          cd ../../
          7z a -mx=9 FontForge.7z fontforge-master
          which fontforge
          fontforge --version

      - name: Download font-patcher
        run: |
          curl -L "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FontPatcher.zip" -o "FontPatcher.zip"
          unzip "FontPatcher.zip"
          ls -lh
          chmod +x ./font-patcher

      - name: Download the Iosevka font
        run: |
          mkdir -p $GITHUB_WORKSPACE/downloaded_font
          curl -L "https://github.com/be5invis/Iosevka/releases/download/${{ needs.check.outputs.tag }}/PkgTTF-${{ env.FONT_NAME }}-${{ needs.check.outputs.ver }}.zip" \
            -o "$GITHUB_WORKSPACE/downloaded_font/${{ env.FONT_NAME }}.zip"
          unzip "$GITHUB_WORKSPACE/downloaded_font/${{ env.FONT_NAME }}.zip" -d "$GITHUB_WORKSPACE/downloaded_font"

      - name: Patch the Iosevka font
        timeout-minutes: 60
        run: |
          mkdir -p $GITHUB_WORKSPACE/patched_font
          fontforge --script ./font-patcher "$GITHUB_WORKSPACE/downloaded_font/PkgTTF-${{ env.FONT_NAME }}-Regular.ttf" \
            --complete --quiet --no-progressbars --outputdir $GITHUB_WORKSPACE/patched_font/
          ls -lh "$GITHUB_WORKSPACE/patched_font"

      - name: Create release with patched fonts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check.outputs.ver }}
          body: |
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          files: |
            patched_font/*
            FontForge.7z
          fail_on_unmatched_files: true
